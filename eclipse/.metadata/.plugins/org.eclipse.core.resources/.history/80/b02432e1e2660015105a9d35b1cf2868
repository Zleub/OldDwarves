
package com.adebray.OldDwarves;

import java.io.Console;
import java.io.File;
import java.util.ArrayList;
import java.util.function.Consumer;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.LinkOption;
import java.nio.file.Path;

import javax.swing.DebugGraphics;

import com.adebray.OldDwarves.common.KeyBlock;
import com.adebray.OldDwarves.common.GlassBlock;

import cpw.mods.fml.common.FMLCommonHandler;
import cpw.mods.fml.common.Mod;
import cpw.mods.fml.common.Mod.Instance;
import cpw.mods.fml.common.Mod.EventHandler;
import cpw.mods.fml.common.event.FMLPreInitializationEvent;
import cpw.mods.fml.common.event.FMLInitializationEvent;
import cpw.mods.fml.common.event.FMLPostInitializationEvent;
import cpw.mods.fml.common.registry.GameRegistry;
import cpw.mods.fml.common.eventhandler.SubscribeEvent;

import net.minecraft.block.Block;
import net.minecraft.block.BlockGlass;
import net.minecraft.block.material.Material;
import net.minecraft.creativetab.CreativeTabs;
import net.minecraft.util.Vec3;
import net.minecraftforge.client.event.RenderGameOverlayEvent;
import net.minecraftforge.common.MinecraftForge;
import net.minecraftforge.common.config.Configuration;
import net.minecraftforge.event.entity.player.PlayerInteractEvent;
import net.minecraftforge.event.world.BlockEvent.PlaceEvent;

@Mod(
		modid = OldDwarves.modId,
		name = OldDwarves.modId, 
		version = OldDwarves.version, 
		dependencies = OldDwarves.dependencies
)
public class OldDwarves {
	
	public static final String modId = "OldDwarves";
	public static final String version = "0.0";
	public static final String dependencies = "required-after:FML";
	
	@Instance("OldDwarves") public static OldDwarves instance;
	
	public class MyEventHandler {

		public ArrayList<String> slots = new ArrayList<String>();
		
		@SubscribeEvent
		public void GuiEvent(RenderGameOverlayEvent.Text event) {
			if (net.minecraft.client.Minecraft.getMinecraft().gameSettings.showDebugInfo) {
				event.left.clear();
				for (String val : slots)
					event.left.add(val);
			}
		}
	}	

	public class Plane {

		private Vec3 position;
		private Vec3 size;
		
		public Plane(Vec3 position, Vec3 size) {
			this.position = position;
			this.size = size;
		}
	}
	
	public class Schema {
		
		class C implements Consumer<String> {

			@Override
			public void accept(String t) {
				System.out.println(t);
			}
			
		}
		
		public Schema(String name) {
			Path path = FileSystems.getDefault().getPath("config", "OldDwarves", name, ".json");
			
			try {
				if (Files.exists(path, LinkOption.NOFOLLOW_LINKS))
					Files.lines(path).forEach();
			} catch (Exception e) {

			}

		}
	}

	public class MultiBlock {
		MultiBlock(Schema s) {

		}
	}
			
	public KeyBlock blockA = new KeyBlock();
	public GlassBlock blockB = new GlassBlock();
	public MyEventHandler events = new MyEventHandler();
	
	public void Debug(String msg) {
		instance.events.slots.add(msg);
		if (instance.events.slots.size() >= 24)
			instance.events.slots.remove(0);
	}
	
	@EventHandler
	public void preInit(FMLPreInitializationEvent event) {
		System.out.println("This is my pre-init event catcher");

		FMLCommonHandler.instance().bus().register(events);
    	MinecraftForge.EVENT_BUS.register(events);
		FMLCommonHandler.instance().bus().register(blockA.eventhandler);
    	MinecraftForge.EVENT_BUS.register(blockA.eventhandler);

    	Configuration config = new Configuration(event.getSuggestedConfigurationFile());
    	config.load();
    	System.out.println(config.toString());
    	
    	GameRegistry.registerBlock(blockA, "DefaultName");
    	GameRegistry.registerBlock(blockB, "DefaultGlass");
    	
    	new Schema("Ground");
    	
	}
	
	@EventHandler
	public void Init(FMLInitializationEvent event) {
		System.out.println("This is my init event catcher");
	}
	
	@EventHandler
	public void PostInit(FMLPostInitializationEvent event) {
		System.out.println("This is my post event catcher");	
		
		
	}
}
